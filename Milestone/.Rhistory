full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,3:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / tetra_studies[row,"num_studies"]
}
PATH = "C://Users//USER//Desktop//gil//lab//Tetramerization//"
tetra_studies = read.csv(paste0(PATH, "oligo_Nov_2021_1_2_data.csv"), stringsAsFactors = F, na.strings = c(""), row.names = 1)
# for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
#         print(i)
#         print(unique(tetra_studies[,i]))
# }
### Feature Engineering ###
# turn features into numeric values (0, 1, 2)
# 0 = deficient, 1 = partial, 2 = normal
Normal_tet = c("Normal", "Wild type", "Tetramer", "Stable")
Partial_tet = c("Dimer", "Partial", "Aggregate Dimer")
Deficient_tet = c("Deficient", "Low", "Monomer", "Mo,omer","Aberrant", "Denatured", "Unstable", "Monomer High")
for(col in colnames(tetra_studies)[3:ncol(tetra_studies)]){
for(val in unique(tetra_studies[,col])){
if(is.na(val)) next
if(val %in% Normal_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 2
if(val %in% Partial_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 1
if(val %in% Deficient_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 0
}
}
PATH = "C://Users//USER//Desktop//gil//lab//Tetramerization//"
tetra_studies = read.csv(paste0(PATH, "oligo_Nov_2021_1_2_data.csv"), stringsAsFactors = F, na.strings = c(""), row.names = 1)
# for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
#         print(i)
#         print(unique(tetra_studies[,i]))
# }
### Feature Engineering ###
# turn features into numeric values (0, 1, 2)
# 0 = deficient, 1 = partial, 2 = normal
Normal_tet = c("Normal", "Wild type", "Tetramer", "Stable")
Partial_tet = c("Dimer", "Partial", "Aggregate Dimer")
Deficient_tet = c("Deficient", "Low", "Monomer", "Mo,omer","Aberrant", "Denatured", "Unstable", "Monomer High")
for(col in colnames(tetra_studies)[2:ncol(tetra_studies)]){
for(val in unique(tetra_studies[,col])){
if(is.na(val)) next
if(val %in% Normal_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 2
if(val %in% Partial_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 1
if(val %in% Deficient_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 0
}
}
full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,3:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / tetra_studies[row,"num_studies"]
}
for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
print(i)
print(unique(tetra_studies[,i]))
}
apply(tetra_studies, 2, as.numeric)
temp = as.data.frame(apply(tetra_studies, 2, as.numeric))
View(temp)
protein_change = row.names(tetra_studies)
tetra_studies = as.data.frame(apply(tetra_studies, 2, as.numeric))
row.names(tetra_studies) = protein_change
PATH = "C://Users//USER//Desktop//gil//lab//Tetramerization//"
tetra_studies = read.csv(paste0(PATH, "oligo_Nov_2021_1_2_data.csv"), stringsAsFactors = F, na.strings = c(""), row.names = 1)
for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
print(i)
print(unique(tetra_studies[,i]))
}
### Feature Engineering ###
# turn features into numeric values (0, 1, 2)
# 0 = deficient, 1 = partial, 2 = normal
Normal_tet = c("Normal", "Wild type", "Tetramer", "Stable")
Partial_tet = c("Dimer", "Partial")
Deficient_tet = c("Deficient", "Low", "Monomer", "Mo,omer","Aberrant", "Denatured", "Unstable", "Monomer High", "Aggregate")
for(col in colnames(tetra_studies)[2:ncol(tetra_studies)]){
for(val in unique(tetra_studies[,col])){
if(is.na(val)) next
if(val %in% Normal_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 2
if(val %in% Partial_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 1
if(val %in% Deficient_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 0
}
}
protein_change = row.names(tetra_studies)
tetra_studies = as.data.frame(apply(tetra_studies, 2, as.numeric))
row.names(tetra_studies) = protein_change
full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,3:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / tetra_studies[row,"num_studies"]
}
full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,2:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / tetra_studies[row,"num_studies"]
}
row = row.names(tetra_studies)[1]
row_values = tetra_studies[row,2:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
PATH = "C://Users//USER//Desktop//gil//lab//Tetramerization//"
tetra_studies = read.csv(paste0(PATH, "oligo_Nov_2021_1_2_data.csv"), stringsAsFactors = F, na.strings = c(""), row.names = 1)
for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
print(i)
print(unique(tetra_studies[,i]))
}
### Feature Engineering ###
# turn features into numeric values (0, 1, 2)
# 0 = deficient, 1 = partial, 2 = normal
Normal_tet = c("Normal", "Wild type", "Tetramer", "Stable")
Partial_tet = c("Dimer", "Partial")
Deficient_tet = c("Deficient", "Low", "Monomer", "Mo,omer","Aberrant", "Denatured", "Unstable", "Monomer High", "Aggregate")
for(col in colnames(tetra_studies)[2:ncol(tetra_studies)]){
for(val in unique(tetra_studies[,col])){
if(is.na(val)) next
if(val %in% Normal_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 2
if(val %in% Partial_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 1
if(val %in% Deficient_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 0
}
}
protein_change = row.names(tetra_studies)
tetra_studies = as.data.frame(apply(tetra_studies, 2, as.numeric))
row.names(tetra_studies) = protein_change
full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,2:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / tetra_studies[row,"num_studies"]
}
PATH = "C://Users//USER//Desktop//gil//lab//Tetramerization//"
tetra_studies = read.csv(paste0(PATH, "oligo_Nov_2021_1_2_data.csv"), stringsAsFactors = F, na.strings = c(""), row.names = 1)
for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
print(i)
print(unique(tetra_studies[,i]))
}
### Feature Engineering ###
# turn features into numeric values (0, 1, 2)
# 0 = deficient, 1 = partial, 2 = normal
Normal_tet = c("Normal", "Wild type", "Tetramer", "Stable")
Partial_tet = c("Dimer", "Partial")
Deficient_tet = c("Deficient", "Low", "Monomer", "Mo,omer","Aberrant", "Denatured", "Unstable", "Monomer High", "Aggregate")
for(col in colnames(tetra_studies)[2:ncol(tetra_studies)]){
for(val in unique(tetra_studies[,col])){
if(is.na(val)) next
if(val %in% Normal_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 2
if(val %in% Partial_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 1
if(val %in% Deficient_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 0
}
}
protein_change = row.names(tetra_studies)
tetra_studies = as.data.frame(apply(tetra_studies, 2, as.numeric))
row.names(tetra_studies) = protein_change
full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,2:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / (2*tetra_studies[row,"num_studies"])
}
max(tetra_studies$num_studies)
max(tetra_studies$sum)
max(tetra_studies$effect_percentage)
rm(list=ls()) #clears the enviorment
rm(list=ls()) #clears the enviorment
df = read.table("D:\\Computational_Medicine_96335\\2021\\EX9\\data_GOES.csv",sep = ",",header = TRUE)
df = read.table("C:\\Users\\USER\\Desktop\\gil\\comp_med\\Ex9\\data_GOES.csv",sep = ",",header = TRUE)
df = read.table("C:\\Users\\USER\\Desktop\\gil\\comp_med\\Ex9\\data_GOES.csv",sep = ",",header = TRUE)
#this is a one sample ttest - as such it requires only one vector and mu (i.e the mean of the distrabution under H0)
example_ttest1 = t.test(df$GOES, alternative = "two.sided", mu = 50, paired = FALSE, var.equal = FALSE, conf.level = 0.95)
example_ttest2 = t.test(df$GOES[df$Countries == "Ireland"], df$GOES[df$Countries == "Elsewhare"], alternative = "two.sided", var.equal = FALSE)
print(example_ttest2)
#this is a two sample ttest - as such it requires two vectors (and no mu as H0 and paired = TRUE)
example_ttest2 = t.test(df$GOES[df$Countries == "Ireland"], df$GOES[df$Countries == "Elsewhare"], alternative = "two.sided", var.equal = FALSE, paired = T)
print(example_ttest2)
#this is a two sample ttest - as such it requires two vectors (and no mu as H0 and paired = TRUE)
example_ttest2 = t.test(df$GOES[df$Countries == "Ireland"], df$GOES[df$Countries == "Elsewhare"], alternative = "two.sided", var.equal = FALSE, paired = T)
#this is a two sample ttest - as such it requires two vectors (and no mu as H0 and paired = TRUE)
example_ttest2 = t.test(df$GOES[df$Countries == "Ireland"], df$GOES[df$Countries == "Elsewhare"], alternative = "two.sided", var.equal = FALSE)
print(example_ttest2)
setwd("D:\\Computational_Medicine_96335\\2021\\EX7")
# normalize the data
# scale is a function we haven't met before in exercises.
# it takes a numeric vector and normalizes it, i.e forcing it into a normal distribution.
bcrf_data_omitted_norm = scale(bcrf_data_omitted[,numeric_cols])
#read our data
setwd("D:\\Computational_Medicine_96335\\2021\\EX7")
setwd("D:\\Computational_Medicine_96335\\2021\\EX7")
setwd("C:\\Users\\USER\\Desktop\\gil\\comp_med\\Ex9\\")
bcrf_data = read.csv(file = 'bc_clinical_info.csv', skip=0, sep = ",", header = TRUE, stringsAsFactors = F)
setwd("C:\\Users\\USER\\Desktop\\gil\\comp_med\\Ex9\\")
bcrf_data = read.csv(file = 'bc_clinical_info.csv', skip=0, sep = ",", header = TRUE, stringsAsFactors = F)
# Now let's add row names
row.names(bcrf_data) = paste0("subject_", c(1:dim(bcrf_data)[1]))
# omit na values, we've seem this function in early exercises
bcrf_data_omitted = na.omit(bcrf_data)
View(bcrf_data_omitted)
# normalize the data
# scale is a function we haven't met before in the exercises.
# it takes a numeric vector and normalizes it, i.e forcing it into a normal distribution surrounding 0.
# Before running the next line of code, look at one of the numeric columns in bcrf_data_omitted. see what happens to the values after using 'scale'.
bcrf_data_omitted_norm = scale(bcrf_data_omitted[,numeric_cols])
# find only numeric columns
# is.numeric is a function that receives a vector, and returns a logical value: TRUE if the vector is numeric and FALSE otherwise.
# using sapply, we run it on all columns of our dataframe.
numeric_cols = sapply(bcrf_data_omitted, is.numeric)
# normalize the data
# scale is a function we haven't met before in the exercises.
# it takes a numeric vector and normalizes it, i.e forcing it into a normal distribution surrounding 0.
# Before running the next line of code, look at one of the numeric columns in bcrf_data_omitted. see what happens to the values after using 'scale'.
bcrf_data_omitted_norm = scale(bcrf_data_omitted[,numeric_cols])
View(bcrf_data_omitted_norm)
# We can use logical operators on data.frames as well
# remove outliers: lets consider a standard deviation of +/-2 as our threshold.
row_outliers = rowSums(bcrf_data_omitted_norm[,1:9]>=2 | bcrf_data_omitted_norm[,1:9]<=-2)>0
View(bcrf_data_omitted)
#read our data
setwd("C:\\Users\\USER\\Desktop\\gil\\comp_med\\Ex9\\")
bcrf_data = read.csv(file = 'bc_clinical_info.csv', skip=0, sep = ",", header = TRUE, stringsAsFactors = F)
# Now let's add row names
row.names(bcrf_data) = paste0("subject_", c(1:dim(bcrf_data)[1]))
# omit na values, we've seem this function in early exercises
bcrf_data_omitted = na.omit(bcrf_data)
# find only numeric columns
# is.numeric is a function that receives a vector, and returns a logical value: TRUE if the vector is numeric and FALSE otherwise.
# using sapply, we run it on all columns of our dataframe.
numeric_cols = sapply(bcrf_data_omitted, is.numeric)
# normalize the data
# scale is a function we haven't met before in the exercises.
# it takes a numeric vector and normalizes it, i.e forcing the column values to fit  a normal distribution surrounding 0.
# Before running the next line of code, look at one of the numeric columns in bcrf_data_omitted. see what happens to the values after using 'scale'.
bcrf_data_omitted_norm = scale(bcrf_data_omitted[,numeric_cols])
# After scaling, values in these columns that are greater than 2 are more than 2 standard deviations (SD) from the mean. We canconsider them as outliers.
# remove outliers: Considering SD of  +/-2 as threshold for the 9 numeric columns.
row_outliers = rowSums(bcrf_data_omitted_norm[,1:9]>=2 | bcrf_data_omitted_norm[,1:9]<=-2)>0
# Remove outliers and non-numeric columns
bcrf_data_omitted_outliers = bcrf_data_omitted[!row_outliers,numeric_cols]
# (note that we don't use the normalized dataframe anymore, we only normalized it to easily calculate SD and hence to easily identify outliers)
par(mfrow=c(1,4), oma=c(6,0,0,0))
for (i in c(2,3,8,9))
{
cur_column = bcrf_data_omitted_outliers[,i]
cur_ttest = t.test(cur_column[bcrf_data$metastases==1], cur_column[bcrf_data$metastases==0], alternative = "two.sided", var.equal = FALSE)
print(example_ttest2)
# If the p-value is distinct, color the boxplots in blue and pink
# p-value indistinct- color boxplots in grey
if (cur_ttest[["p.value"]] > 0.05){
seg_col = c("grey", "grey")
} else {
seg_col = c("blue", "pink")
}
boxplot(cur_column[bcrf_data$metastases==1],cur_column[bcrf_data$metastases==0], names = c("Metastases in 5 years","Disease free in 5 years"), col = seg_col,ylab =  names(bcrf_data_omitted)[i], las=3)
}
PATH = "C://Users//USER//Desktop//gil//lab//Tetramerization//"
tetra_studies = read.csv(paste0(PATH, "oligo_Nov_2021_1_2_data.csv"), stringsAsFactors = F, na.strings = c(""), row.names = 1)
# 1. create labeling based on tetra studies
for(i in colnames(tetra_studies)[3:ncol(tetra_studies)]){
print(i)
print(unique(tetra_studies[,i]))
}
### Feature Engineering ###
# turn features into numeric values (0, 1, 2)
# 0 = deficient, 1 = partial, 2 = normal
Normal_tet = c("Normal", "Wild type", "Tetramer", "Stable")
Partial_tet = c("Dimer", "Partial")
Deficient_tet = c("Deficient", "Low", "Monomer", "Mo,omer","Aberrant", "Denatured", "Unstable", "Monomer High", "Aggregate")
for(col in colnames(tetra_studies)[2:ncol(tetra_studies)]){
for(val in unique(tetra_studies[,col])){
if(is.na(val)) next
if(val %in% Normal_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 2
if(val %in% Partial_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 1
if(val %in% Deficient_tet) tetra_studies[tetra_studies[,col] == val & !is.na(tetra_studies[,col]),col] = 0
}
}
protein_change = row.names(tetra_studies)
tetra_studies = as.data.frame(apply(tetra_studies, 2, as.numeric))
row.names(tetra_studies) = protein_change
### Summarize variants that are in full agreement.
# also create new features:
# sum: summation of all studies results for each variant
# num_studies: how many studies had data for each variant
# effect percentage: sum/num_studies. to quantify the level of certainty each score has based on the amount of studies that it is comprised of.
full_agreement_rows = c()
for(row in row.names(tetra_studies)){
row_values = tetra_studies[row,2:ncol(tetra_studies)]
row_values = row_values[!is.na(row_values)]
if(length(unique(row_values))==1)
full_agreement_rows = c(full_agreement_rows, row)
tetra_studies[row, "sum"] = sum(row_values)
tetra_studies[row, "num_studies"] = length(row_values)
tetra_studies[row, "effect_percentage"] = tetra_studies[row,"sum"] / (2*tetra_studies[row,"num_studies"])
}
# remove variants with no studies (keep trace of TD variants)
TD_variants = row.names(tetra_studies)
tetra_studies = tetra_studies[tetra_studies$num_studies != 0,]
table(tetra_studies[full_agreement_rows,"num_studies"], tetra_studies[full_agreement_rows,"effect_percentage"])
table(tetra_studies$effect_percentage, tetra_studies$num_studies)
write.csv(table(tetra_studies[full_agreement_rows,"num_studies"], tetra_studies[full_agreement_rows,"effect_percentage"]), paste0(PATH+"variants_in_full_agreement.csv"))
write.csv(table(tetra_studies[full_agreement_rows,"num_studies"], tetra_studies[full_agreement_rows,"effect_percentage"]), paste0(PATH,"variants_in_full_agreement.csv"))
length(full_agreement_rows)
table(tetra_studies$effect_percentage, tetra_studies$num_studies)
tetra_studies$label = 0
tetra_studies[row.names(tetra_studies) %in% full_agreement_rows & tetra_studies$effect_percentage == 0, "label"] = 0
tetra_studies[tetra_studies$effect_percentage > 0 & tetra_studies$effect_percentage <= 0.3, "label"] = 1
tetra_studies[tetra_studies$effect_percentage > 0.3 & tetra_studies$effect_percentage < 0.7, "label"] = 2
tetra_studies[tetra_studies$effect_percentage >= 0.7 & tetra_studies$effect_percentage < 1, "label"] = 3
tetra_studies[row.names(tetra_studies) %in% full_agreement_rows & tetra_studies$effect_percentage == 1 & tetra_studies$num_studies == 1, "label"] = 4
tetra_studies[row.names(tetra_studies) %in% full_agreement_rows & tetra_studies$effect_percentage == 1 & tetra_studies$num_studies > 1, "label"] = 5
# overview of new label
table(tetra_studies$label)
View(tetra_studies)
tetra_sudies_for_thierry = tetra_studies[,c("sum", "num_studies", "effect_percentage", "label")]
View(tetra_sudies_for_thierry)
write.csv(tetra_sudies_for_thierry, paste0(PATH, "variants_with_suggested_label.csv"))
load("pola_oligo_cnv_merged_28_7_16.RData")
PATH = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd(PATH)
TCGA_data = read.csv(paste0(PATH, "TGCA_data_version2.tsv"), sep = "\t")
is_na_surv = is.na(TCGA_data$Overall.Survival..Months.)
TCGA_data = TCGA_data[!is_na_surv,]
val <- sapply(TCGA_data, uunique
)
val <- sapply(TCGA_data, unique)
View(val)
len <- sapply(val, length)
len
name <- names(TCGA_data)
num_level <- length(unique(TCGA_data[[name]]))
#setting new working directory
new_dir = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd=(new_dir)
#reading data file
TGCA_data=read.table(file='TGCA_data_version2.tsv',skip=0,sep="\t",header=TRUE ,stringsAsFactors = F)
#setting new working directory
new_dir = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd=(new_dir)
#reading data file
TGCA_data=read.table(file='TGCA_data_version2.tsv',skip=0,sep="\t",header=TRUE ,stringsAsFactors = F)
PATH = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd(PATH)
TCGA_data = read.csv(paste0(PATH, "TGCA_data_version2.tsv"), sep = "\t")
TGCA_data=read.table(file='TGCA_data_version2.tsv',skip=0,sep="\t",header=TRUE ,stringsAsFactors = F)
setwd=(new_dir)
new_dir = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd=(new_dir)
#reading data file
TGCA_data=read.table(file='TGCA_data_version2.tsv',skip=0,sep="\t",header=TRUE ,stringsAsFactors = F)
#setting new working directory
new_dir = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd=(new_dir)
#reading data file
TGCA_data=read.table(file='TGCA_data_version2.tsv',skip=0,sep="\t",header=TRUE ,stringsAsFactors = F)
#cleaning data- removing rows of data where Overall.Survival..Months. values=NA
clean_TGCA_data=TGCA_data[!(is.na(TGCA_data$Overall.Survival..Months.)),]
TCGA_data = read.csv(paste0(PATH, "TGCA_data_version2.tsv"), sep = "\t")
#cleaning data- removing rows of data where Overall.Survival..Months. values=NA
clean_TGCA_data=TGCA_data[!(is.na(TGCA_data$Overall.Survival..Months.)),]
#cleaning data- removing rows of data where Overall.Survival..Months. values=NA
clean_TGCA_data=TGCA_data[!(is.na(TGCA_data$Overall.Survival..Months.)),]
#setting new working directory
new_dir = "C://Users//USER//Desktop//gil//comp_med//Assignments//Assignment 5//"
setwd=(new_dir)
#reading data file
TGCA_data=read.table(paste0(new_dir,"TGCA_data_version2.tsv"),skip=0,sep="\t",header=TRUE ,stringsAsFactors = F)
head(TGCA_data, 5)
#cleaning data- removing rows of data where Overall.Survival..Months. values=NA
clean_TGCA_data=TGCA_data[!(is.na(TGCA_data$Overall.Survival..Months.)),]
#head(clean_TGCA_data, 5) #commented to avoid overloading the html
survival_mn=clean_TGCA_data$Overall.Survival..Months.
diag_age=clean_TGCA_data$Diagnosis.Age
df_sa=data.frame(diag_age,survival_mn)
# a) Fit linear model
model = lm(diag_age ~ survival_mn)
# Examine model
model
summary(model)
# b) Plot data + fitted line from the regression
plot(df_sa, main = "Month of survival in correlation with age of diagnosis", xlab = "Age of diagnosis", ylab = "Overall survival months")
abline(model, col="blue")
# c) Explanation: P-value is statistically significant. The number of survival months decreases significantly as the age of diagnosis increases. (negative correlation).
# d)
model1<-lm(survival_mn ~ diag_age, data = df_sa)
new_ages <- data.frame(ages = c(10, 40, 90))
colnames(new_ages) <- "diag_age"
pre=predict(model1,newdata =  new_ages)
# The predicted values of survival months according to different diagnosis ages, matches the connclusion of decreasing survival time with increased diagnosis age.
survival_mn=clean_TGCA_data$Overall.Survival..Months.
# a) continuous numeric variables from data
n=0
cont_cols=vector()
for (i in 1:ncol(clean_TGCA_data))  {
col=clean_TGCA_data[,i]
#Continuous and numeric variables
if (is.numeric(col) & length(unique(col))>10) {
n=n+1
cont_cols=append(cont_cols,i)
}
}
# random sampling of 5 of the continuous variables
xs=sample(cont_cols,5)
x1=clean_TGCA_data[,xs[1]]
x2=clean_TGCA_data[,xs[2]]
x3=clean_TGCA_data[,xs[3]]
x4=clean_TGCA_data[,xs[4]]
x5=clean_TGCA_data[,xs[5]]
# b) Multiple Linear Regression Example
fit = lm(x1+x2+x3+x4+x5 ~ survival_mn)
summary(fit) # show results
# c) P-value is high = insignificant, meaning that the model is not improved by the addition of the 5 random variables.
survival_mn=clean_TGCA_data$Overall.Survival..Months.
survival_mn=clean_TGCA_data$Overall.Survival..Months.
# a) continuous numeric variables from data
n=0
cont_cols=vector()
for (i in 1:ncol(clean_TGCA_data))  {
col=clean_TGCA_data[,i]
#Continuous and numeric variables
if (is.numeric(col) & length(unique(col))>10) {
n=n+1
cont_cols=append(cont_cols,i)
}
}
# random sampling of 5 of the continuous variables
xs=sample(cont_cols,5)
x1=clean_TGCA_data[,xs[1]]
x2=clean_TGCA_data[,xs[2]]
x3=clean_TGCA_data[,xs[3]]
x4=clean_TGCA_data[,xs[4]]
x5=clean_TGCA_data[,xs[5]]
# b) Multiple Linear Regression Example
fit = lm(x1+x2+x3+x4+x5 ~ survival_mn)
summary(fit) # show results
# c) P-value is high = insignificant, meaning that the model is not improved by the addition of the 5 random variables.
# b) Multiple Linear Regression Example
fit = lm(survival_mn~x1+x2+x3+x4+x5)
summary(fit) # show results
# 2) reading data set into "pola_data" data frame
load("pola_oligo_cnv_merged_28_7_16.RData")
head(pola_data)
# 3) creating vector of specific variable names (those containing 1-7 levels)
m=0
var_1_7=vector()
vhelp=vector()
for (i in 1:ncol(pola_data))  {
col=pola_data[,i]
if ((length(unique(col))>1 & length(unique(col))<7 ) & (sum(!is.na(unique(col)))>=2)) {
m=m+1
var_1_7=append(var_1_7,colnames(pola_data[i]))
vhelp=append(vhelp,i)
}
}
library(ggplot2)
library(survival)
library(survminer)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(ggfortify)
cols <- brewer.pal(7, "Set1")
# a) Surv function
s=Surv(pola_data$Survival.Overall.month , pola_data$Last.news.Death)
# b) c) loop + KM plot of significant p-vals
for (i in 1:length(var_1_7))  {
col=pola_data[,vhelp[i]]
sh=survdiff(s~col)
p_val = 1 - pchisq(sh$chisq, length(sh$n) - 1)
if(p_val<0.05){
message(paste0("Significant p_value for: ", var_1_7[i] ))
fit <- survfit(Surv(pola_data$Survival.Overall.month , pola_data$Last.news.Death) ~ col, data = pola_data)
plot(fit, col=cols, lty=c(1:length((unique(col)))), lwd=3,
conf.int = TRUE, xmax = 2000, xlab = "Months",
ylab = "Overall Survival ", main = var_1_7[i])
legend(x = "bottomleft", legend =c(unique(col)),
lty = c(1:2), col=cols)
}
}
Sys.setlocale("LC_ALL", "Hebrew")
options(encoding ="UTF-8-BOM")
# read data
il_edu_2019 = read.csv("education_2019.csv", stringsAsFactors = F, row.names = 1, na.strings = c("..", "-"))
setwd("C:\\Users\\USER\\Desktop\\gil\\PhD\\year_break_3\\Needle_in_data\\Final_project\\Milestone\\")
# read data
il_edu_2019 = read.csv("education_2019.csv", stringsAsFactors = F, row.names = 1, na.strings = c("..", "-"))
View(il_edu_2019)
il_edu_2019_cor_bagrut_academy = il_edu_2019[,c("????.??????????",
"????????.??????????.????????????.??????????.????????.????????????.??????????.????.??????.??.2018.19",
"??????????.??????????.????????.??????????????.????????????.??????????.????????.8.????????.????????.????????????.????.????.??.2019.20",
"??????????.??????????????.??????????.????????.??????.??????????????.??????.??.2018.19")]
il_population_2020 = read.csv("population_2020.csv", stringsAsFactors = F, row.names = 1)
il_population_2020 = il_population_2020[row.names(il_edu_2019),]
